head(data1,10)
# Establecimiendo de escalas ordinales
data1$grado <- factor(data1$grado, levels= c("Bajo","Medio","Alto","Muy alto"), order=TRUE)
auxiliares <- colnames(data1[, c(8,9)])
analisis <- colnames(data1[,1:7]) # Seleccion de columnas
columnas <- c(auxiliares, analisis)
datos <- data1[, columnas] # Extraccion
# Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categóricas
nominales <- which( tipo == "factor") # categóricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
# Histogramas
multi.hist(datos[, numericas])
# Boxplot
boxplot(datos, main="Caja y Bigotes",
frame = FALSE, xlab="Variables", ylab= "Escala Normal", cex=0.4);grid()
# Andrews ##CORREGIR!!!
#andrews(df = datos, type=2, bty = "n", ylab="f(t)", xlab="t",lwd=1, main="Grafico Andrews" ); grid()
outliers <- boxplot(datos$avrating)$out
elementos <- which(datos$avrating %in% outliers)
#datos <- datos[-union(elementos,elementos), ]
# Normalizacion
datos[,analisis] <- sapply(datos[, analisis], function(data){
(data - min(data, na.rm = TRUE)) / (max(data, na.rm = TRUE) - min(data, na.rm = TRUE))})
# Boxplot
boxplot(datos[, analisis], main="Caja y Bigotes",
frame = FALSE, xlab="Variables", ylab= "Escala Normal", cex=0.4);grid()
# Transformacion a escala ordinal
datos[, analisis] <- datos[, analisis]*100
datos[, analisis] <- round(datos[, analisis])
for(indice in analisis){
for(n in 1:nrow(datos)){
datos[n,indice] = car::recode(datos[n,indice], "0:40=1; 41:60=2; 61:80=3; 81:100=4")
}
}
# Formato Correcto
for(indice in analisis){
datos[, indice] <- factor(datos[, indice], order = TRUE)
}
# Redefinicion de Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categoricas
nominales <- which( tipo == "factor") # categoricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
gower_dist <- daisy(datos[, analisis], metric = "gower")
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 7)
fit.datos$stress
fit.datos$rss
# Dispersion
plot(fit.datos, plot.dim = c(1,2), main = "Escalamiento Multidimensional No metrico",
xlab="Dim 1", ylab="Dim 2", cex=0.5, cex.main=1,
bty = "n",  col = datos$Grado.de.rezago.social );grid()
# Curva Shape
plot(fit.datos, plot.type = "Shepard", main="Curva Shepard",
xlab="Distancias observadas", ylab="Configuracion de distancias", cex=0.5, cex.main=1,
col="skyblue", bty = "n");grid()
reticulate::repl_python()
from sklearn.manifold import TSNE
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Datos
datos = r.datos
# Particion horizontal
x = np.array(datos[r.analisis])
y = np.array(datos[r.auxiliares[1]]) # Variable suplementaria
x_coord = TSNE(n_components = 3, perplexity = 30, n_iter = 4000).fit_transform(x)
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
reticulate::repl_python()
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
#exit
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
reticulate::repl_python()
plt.clf()
#sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
reticulate::repl_python()
plt.clf()
sns.set(style="whitegrid")
#sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
reticulate::repl_python()
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
# Histogramas
par( mfrow= c(2,2) )
multi.hist(datos[, numericas])
# Histogramas
par( mfrow= c(4,2) )
multi.hist(datos[, numericas])
# Histogramas
par(mfrow= c(2,2) )
multi.hist(datos[, numericas])
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(smacof)
library(cluster)
library(lubridate)
library(andrews)
library(dplyr)
library(corrplot)
source("utilerias/funciones.R")
data1 <- smacof::RockHard
head(data1, 10)
data1$Band_Album<-paste(data1$Band,"_",data1$Album)
rownames(data1) <- data1$Band_Album # Estableciendo como indice las bandas
data1$Band_Album <- NULL # Estableciendo como indice las bandas
data1 <- subset(data1, select = -c(Year, Month, Band, Album))
head(data1)
sprintf("Gotz: %d de %d", sum(is.na(data1$Götz)),  576)
sprintf("Thomas: %d de %d", sum(is.na(data1$Thomas)),  576)
sprintf("Frank: %d de %d", sum(is.na(data1$Frank)),  576)
sprintf("Björn: %d de %d", sum(is.na(data1$Björn)),  576)
sprintf("Jan: %d de %d", sum(is.na(data1$Jan)),  576)
sprintf("Boris: %d de %d", sum(is.na(data1$Boris)),  576)
sprintf("Himmelstein: %d de %d", sum(is.na(data1$Himmelstein)),  576)
sprintf("Michael: %d de %d", sum(is.na(data1$Michael)),  576)
sprintf("Jens: %d de %d", sum(is.na(data1$Jens)),  576)
sprintf("Ronny: %d de %d", sum(is.na(data1$Ronny)),  576)
sprintf("Felix: %d de %d", sum(is.na(data1$Felix)),  576)
sprintf("Jakob: %d de %d", sum(is.na(data1$Jakob)),  576)
sprintf("Marcus: %d de %d", sum(is.na(data1$Marcus)),  576)
sprintf("Jenny: %d de %d", sum(is.na(data1$Jenny)),  576)
#cor(na.omit(data1))
options(digits=2)
cor(data1,  method = "pearson", use = "pairwise.complete.obs")
data1<-subset(data1, select = -c(Michael, Jens, Ronny, Felix, Jakob, Marcus, Jenny))
#cor(na.omit(data1))
options(digits=2)
cor(data1,  method = "pearson", use = "pairwise.complete.obs")
data1$avrating <- rowMeans(data1[,1:7], na.rm=TRUE)
data1<-data1 %>% mutate(grado = case_when(avrating <= 4 ~ "Bajo",
avrating <= 6 ~ "Medio",
avrating <= 8 ~ "Alto",
avrating <= 10 ~ "Muy alto"))
head(data1,10)
# Establecimiendo de escalas ordinales
data1$grado <- factor(data1$grado, levels= c("Bajo","Medio","Alto","Muy alto"), order=TRUE)
auxiliares <- colnames(data1[, c(8,9)])
analisis <- colnames(data1[,1:7]) # Seleccion de columnas
columnas <- c(auxiliares, analisis)
datos <- data1[, columnas] # Extraccion
# Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categóricas
nominales <- which( tipo == "factor") # categóricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
# Histogramas
par(mfrow= c(2,2) )
multi.hist(datos[, numericas])
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 7)
#fit.datos$stress
sprintf("Stress: %d", sum(is.na(fit.datos$stress)))
fit.datos$rss
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 7)
Stress<-fit.datos$stress
sprintf("Stress: %d", Stress)
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 7)
Stress<-fit.datos$stress
sprintf("Stress: %d", Stress)
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 7)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(smacof)
library(cluster)
library(lubridate)
library(andrews)
library(dplyr)
library(corrplot)
source("utilerias/funciones.R")
data1 <- smacof::RockHard
head(data1, 10)
data1$Band_Album<-paste(data1$Band,"_",data1$Album)
rownames(data1) <- data1$Band_Album # Estableciendo como indice las bandas
data1$Band_Album <- NULL # Estableciendo como indice las bandas
data1 <- subset(data1, select = -c(Year, Month, Band, Album))
head(data1)
sprintf("Gotz: %d de %d", sum(is.na(data1$Götz)),  576)
sprintf("Thomas: %d de %d", sum(is.na(data1$Thomas)),  576)
sprintf("Frank: %d de %d", sum(is.na(data1$Frank)),  576)
sprintf("Björn: %d de %d", sum(is.na(data1$Björn)),  576)
sprintf("Jan: %d de %d", sum(is.na(data1$Jan)),  576)
sprintf("Boris: %d de %d", sum(is.na(data1$Boris)),  576)
sprintf("Himmelstein: %d de %d", sum(is.na(data1$Himmelstein)),  576)
sprintf("Michael: %d de %d", sum(is.na(data1$Michael)),  576)
sprintf("Jens: %d de %d", sum(is.na(data1$Jens)),  576)
sprintf("Ronny: %d de %d", sum(is.na(data1$Ronny)),  576)
sprintf("Felix: %d de %d", sum(is.na(data1$Felix)),  576)
sprintf("Jakob: %d de %d", sum(is.na(data1$Jakob)),  576)
sprintf("Marcus: %d de %d", sum(is.na(data1$Marcus)),  576)
sprintf("Jenny: %d de %d", sum(is.na(data1$Jenny)),  576)
#cor(na.omit(data1))
options(digits=2)
cor(data1,  method = "pearson", use = "pairwise.complete.obs")
data1<-subset(data1, select = -c(Michael, Jens, Ronny, Felix, Jakob, Marcus, Jenny))
#cor(na.omit(data1))
options(digits=2)
cor(data1,  method = "pearson", use = "pairwise.complete.obs")
data1$avrating <- rowMeans(data1[,1:7], na.rm=TRUE)
data1<-data1 %>% mutate(grado = case_when(avrating <= 4 ~ "Bajo",
avrating <= 6 ~ "Medio",
avrating <= 8 ~ "Alto",
avrating <= 10 ~ "Muy alto"))
head(data1,10)
# Establecimiendo de escalas ordinales
data1$grado <- factor(data1$grado, levels= c("Bajo","Medio","Alto","Muy alto"), order=TRUE)
auxiliares <- colnames(data1[, c(8,9)])
analisis <- colnames(data1[,1:7]) # Seleccion de columnas
columnas <- c(auxiliares, analisis)
datos <- data1[, columnas] # Extraccion
# Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categóricas
nominales <- which( tipo == "factor") # categóricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
# Histogramas
par(mfrow= c(2,2) )
multi.hist(datos[, numericas])
# Boxplot
boxplot(datos, main="Caja y Bigotes",
frame = FALSE, xlab="Variables", ylab= "Escala Normal", cex=0.4);grid()
# Andrews ##CORREGIR!!!
#andrews(df = datos, type=2, bty = "n", ylab="f(t)", xlab="t",lwd=1, main="Grafico Andrews" ); grid()
outliers <- boxplot(datos$avrating)$out
elementos <- which(datos$avrating %in% outliers)
#datos <- datos[-union(elementos,elementos), ]
# Normalizacion
datos[,analisis] <- sapply(datos[, analisis], function(data){
(data - min(data, na.rm = TRUE)) / (max(data, na.rm = TRUE) - min(data, na.rm = TRUE))})
# Boxplot
boxplot(datos[, analisis], main="Caja y Bigotes",
frame = FALSE, xlab="Variables", ylab= "Escala Normal", cex=0.4);grid()
# Transformacion a escala ordinal
datos[, analisis] <- datos[, analisis]*100
datos[, analisis] <- round(datos[, analisis])
for(indice in analisis){
for(n in 1:nrow(datos)){
datos[n,indice] = car::recode(datos[n,indice], "0:40=1; 41:60=2; 61:80=3; 81:100=4")
}
}
# Formato Correcto
for(indice in analisis){
datos[, indice] <- factor(datos[, indice], order = TRUE)
}
# Redefinicion de Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categoricas
nominales <- which( tipo == "factor") # categoricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
gower_dist <- daisy(datos[, analisis], metric = "gower")
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 7)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
# Dispersion
plot(fit.datos, plot.dim = c(1,2), main = "Escalamiento Multidimensional No metrico",
xlab="Dim 1", ylab="Dim 2", cex=0.5, cex.main=1,
bty = "n",  col = datos$Grado.de.rezago.social );grid()
# Curva Shape
plot(fit.datos, plot.type = "Shepard", main="Curva Shepard",
xlab="Distancias observadas", ylab="Configuracion de distancias", cex=0.5, cex.main=1,
col="skyblue", bty = "n");grid()
reticulate::repl_python()
from sklearn.manifold import TSNE
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Datos
datos = r.datos
# Particion horizontal
x = np.array(datos[r.analisis])
y = np.array(datos[r.auxiliares[1]]) # Variable suplementaria
x_coord = TSNE(n_components = 3, perplexity = 30, n_iter = 4000).fit_transform(x)
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 6)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 5)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 8)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 9)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 10)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
# Dispersion
plot(fit.datos, plot.dim = c(1,2), main = "Escalamiento Multidimensional No metrico",
xlab="Dim 1", ylab="Dim 2", cex=0.5, cex.main=1,
bty = "n",  col = datos$Grado.de.rezago.social );grid()
# Curva Shape
plot(fit.datos, plot.type = "Shepard", main="Curva Shepard",
xlab="Distancias observadas", ylab="Configuracion de distancias", cex=0.5, cex.main=1,
col="skyblue", bty = "n");grid()
reticulate::repl_python()
from sklearn.manifold import TSNE
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Datos
datos = r.datos
# Particion horizontal
x = np.array(datos[r.analisis])
y = np.array(datos[r.auxiliares[1]]) # Variable suplementaria
x_coord = TSNE(n_components = 3, perplexity = 30, n_iter = 4000).fit_transform(x)
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 5)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(smacof)
library(cluster)
library(lubridate)
library(andrews)
library(dplyr)
library(corrplot)
source("utilerias/funciones.R")
data1 <- smacof::RockHard
head(data1, 10)
data1$Band_Album<-paste(data1$Band,"_",data1$Album)
rownames(data1) <- data1$Band_Album # Estableciendo como indice las bandas
data1$Band_Album <- NULL # Estableciendo como indice las bandas
data1 <- subset(data1, select = -c(Year, Month, Band, Album))
head(data1)
sprintf("Gotz: %d de %d", sum(is.na(data1$Götz)),  576)
sprintf("Thomas: %d de %d", sum(is.na(data1$Thomas)),  576)
sprintf("Frank: %d de %d", sum(is.na(data1$Frank)),  576)
sprintf("Björn: %d de %d", sum(is.na(data1$Björn)),  576)
sprintf("Jan: %d de %d", sum(is.na(data1$Jan)),  576)
sprintf("Boris: %d de %d", sum(is.na(data1$Boris)),  576)
sprintf("Himmelstein: %d de %d", sum(is.na(data1$Himmelstein)),  576)
sprintf("Michael: %d de %d", sum(is.na(data1$Michael)),  576)
sprintf("Jens: %d de %d", sum(is.na(data1$Jens)),  576)
sprintf("Ronny: %d de %d", sum(is.na(data1$Ronny)),  576)
sprintf("Felix: %d de %d", sum(is.na(data1$Felix)),  576)
sprintf("Jakob: %d de %d", sum(is.na(data1$Jakob)),  576)
sprintf("Marcus: %d de %d", sum(is.na(data1$Marcus)),  576)
sprintf("Jenny: %d de %d", sum(is.na(data1$Jenny)),  576)
#cor(na.omit(data1))
options(digits=2)
cor(data1,  method = "pearson", use = "pairwise.complete.obs")
data1<-subset(data1, select = -c(Michael, Jens, Ronny, Felix, Jakob, Marcus, Jenny))
#cor(na.omit(data1))
options(digits=2)
cor(data1,  method = "pearson", use = "pairwise.complete.obs")
data1$avrating <- rowMeans(data1[,1:7], na.rm=TRUE)
data1<-data1 %>% mutate(grado = case_when(avrating <= 4 ~ "Bajo",
avrating <= 6 ~ "Medio",
avrating <= 8 ~ "Alto",
avrating <= 10 ~ "Muy alto"))
head(data1,10)
# Establecimiendo de escalas ordinales
data1$grado <- factor(data1$grado, levels= c("Bajo","Medio","Alto","Muy alto"), order=TRUE)
auxiliares <- colnames(data1[, c(8,9)])
analisis <- colnames(data1[,1:7]) # Seleccion de columnas
columnas <- c(auxiliares, analisis)
datos <- data1[, columnas] # Extraccion
# Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categóricas
nominales <- which( tipo == "factor") # categóricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
# Histogramas
par(mfrow= c(2,2) )
multi.hist(datos[, numericas])
# Boxplot
boxplot(datos, main="Caja y Bigotes",
frame = FALSE, xlab="Variables", ylab= "Escala Normal", cex=0.4);grid()
# Andrews ##CORREGIR!!!
#andrews(df = datos, type=2, bty = "n", ylab="f(t)", xlab="t",lwd=1, main="Grafico Andrews" ); grid()
outliers <- boxplot(datos$avrating)$out
elementos <- which(datos$avrating %in% outliers)
#datos <- datos[-union(elementos,elementos), ]
# Normalizacion
datos[,analisis] <- sapply(datos[, analisis], function(data){
(data - min(data, na.rm = TRUE)) / (max(data, na.rm = TRUE) - min(data, na.rm = TRUE))})
# Boxplot
boxplot(datos[, analisis], main="Caja y Bigotes",
frame = FALSE, xlab="Variables", ylab= "Escala Normal", cex=0.4);grid()
# Transformacion a escala ordinal
datos[, analisis] <- datos[, analisis]*100
datos[, analisis] <- round(datos[, analisis])
for(indice in analisis){
for(n in 1:nrow(datos)){
datos[n,indice] = car::recode(datos[n,indice], "0:40=1; 41:60=2; 61:80=3; 81:100=4")
}
}
# Formato Correcto
for(indice in analisis){
datos[, indice] <- factor(datos[, indice], order = TRUE)
}
# Redefinicion de Escalas
tipo <- sapply(datos, class)
continuas <-  which(tipo == "numeric") # continuas
enteras <- which(tipo == "integer") # enteras
numericas <- names(c(continuas,enteras))
# Variables Categoricas
nominales <- which( tipo == "factor") # categoricas
ordinales <- which( sapply(datos, is.ordered) )  # ordinales
fecha <- which(tipo == "Date") # Fecha
categoricas <- names(c(nominales, ordinales, fecha))
gower_dist <- daisy(datos[, analisis], metric = "gower")
fit.datos <- smacofSym(gower_dist, type = "ordinal", ndim = 5)
Stress<-fit.datos$stress
sprintf("Stress: %f", Stress)
RSS<-fit.datos$rss
sprintf("RSS: %f", RSS)
# Dispersion
plot(fit.datos, plot.dim = c(1,2), main = "Escalamiento Multidimensional No metrico",
xlab="Dim 1", ylab="Dim 2", cex=0.5, cex.main=1,
bty = "n",  col = datos$Grado.de.rezago.social );grid()
# Curva Shape
plot(fit.datos, plot.type = "Shepard", main="Curva Shepard",
xlab="Distancias observadas", ylab="Configuracion de distancias", cex=0.5, cex.main=1,
col="skyblue", bty = "n");grid()
reticulate::repl_python()
from sklearn.manifold import TSNE
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Datos
datos = r.datos
# Particion horizontal
x = np.array(datos[r.analisis])
y = np.array(datos[r.auxiliares[1]]) # Variable suplementaria
x_coord = TSNE(n_components = 3, perplexity = 30, n_iter = 4000).fit_transform(x)
plt.clf()
sns.set(style="whitegrid")
sns.relplot(x=x_coord[:,0], y=x_coord[:,1], hue=y, palette="muted" )
plt.show()
exit
